//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.20506.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.20506.1.
// 
#pragma warning disable 1591

namespace FR60.FRService
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "FRServiceSoap", Namespace = "http://riggvar.net/data")]
    public partial class FRService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;

        private System.Threading.SendOrPostCallback TestUTF8OperationCompleted;

        private System.Threading.SendOrPostCallback LoadFieldOperationCompleted;

        private System.Threading.SendOrPostCallback LoadEventNamesOperationCompleted;

        private System.Threading.SendOrPostCallback LoadEventDataOperationCompleted;

        private System.Threading.SendOrPostCallback SaveEventDataOperationCompleted;

        private System.Threading.SendOrPostCallback ExecuteCommandOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public FRService()
        {
            this.Url = System.Configuration.ConfigurationManager.AppSettings["FRServiceUrl"];
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;

        /// <remarks/>
        public event TestUTF8CompletedEventHandler TestUTF8Completed;

        /// <remarks/>
        public event LoadFieldCompletedEventHandler LoadFieldCompleted;

        /// <remarks/>
        public event LoadEventNamesCompletedEventHandler LoadEventNamesCompleted;

        /// <remarks/>
        public event LoadEventDataCompletedEventHandler LoadEventDataCompleted;

        /// <remarks/>
        public event SaveEventDataCompletedEventHandler SaveEventDataCompleted;

        /// <remarks/>
        public event ExecuteCommandCompletedEventHandler ExecuteCommandCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://riggvar.net/data/HelloWorld", RequestNamespace = "http://riggvar.net/data", ResponseNamespace = "http://riggvar.net/data", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld()
        {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void HelloWorldAsync()
        {
            this.HelloWorldAsync(null);
        }

        /// <remarks/>
        public void HelloWorldAsync(object userState)
        {
            if ((this.HelloWorldOperationCompleted == null))
            {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }

        private void OnHelloWorldOperationCompleted(object arg)
        {
            if ((this.HelloWorldCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://riggvar.net/data/TestUTF8", RequestNamespace = "http://riggvar.net/data", ResponseNamespace = "http://riggvar.net/data", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TestUTF8(string s)
        {
            object[] results = this.Invoke("TestUTF8", new object[] {
                        s});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void TestUTF8Async(string s)
        {
            this.TestUTF8Async(s, null);
        }

        /// <remarks/>
        public void TestUTF8Async(string s, object userState)
        {
            if ((this.TestUTF8OperationCompleted == null))
            {
                this.TestUTF8OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestUTF8OperationCompleted);
            }
            this.InvokeAsync("TestUTF8", new object[] {
                        s}, this.TestUTF8OperationCompleted, userState);
        }

        private void OnTestUTF8OperationCompleted(object arg)
        {
            if ((this.TestUTF8Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestUTF8Completed(this, new TestUTF8CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://riggvar.net/data/LoadField", RequestNamespace = "http://riggvar.net/data", ResponseNamespace = "http://riggvar.net/data", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadField(int KatID, string EventName, string FieldName)
        {
            object[] results = this.Invoke("LoadField", new object[] {
                        KatID,
                        EventName,
                        FieldName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LoadFieldAsync(int KatID, string EventName, string FieldName)
        {
            this.LoadFieldAsync(KatID, EventName, FieldName, null);
        }

        /// <remarks/>
        public void LoadFieldAsync(int KatID, string EventName, string FieldName, object userState)
        {
            if ((this.LoadFieldOperationCompleted == null))
            {
                this.LoadFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadFieldOperationCompleted);
            }
            this.InvokeAsync("LoadField", new object[] {
                        KatID,
                        EventName,
                        FieldName}, this.LoadFieldOperationCompleted, userState);
        }

        private void OnLoadFieldOperationCompleted(object arg)
        {
            if ((this.LoadFieldCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadFieldCompleted(this, new LoadFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://riggvar.net/data/LoadEventNames", RequestNamespace = "http://riggvar.net/data", ResponseNamespace = "http://riggvar.net/data", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadEventNames(int KatID, string EventFilter)
        {
            object[] results = this.Invoke("LoadEventNames", new object[] {
                        KatID,
                        EventFilter});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LoadEventNamesAsync(int KatID, string EventFilter)
        {
            this.LoadEventNamesAsync(KatID, EventFilter, null);
        }

        /// <remarks/>
        public void LoadEventNamesAsync(int KatID, string EventFilter, object userState)
        {
            if ((this.LoadEventNamesOperationCompleted == null))
            {
                this.LoadEventNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadEventNamesOperationCompleted);
            }
            this.InvokeAsync("LoadEventNames", new object[] {
                        KatID,
                        EventFilter}, this.LoadEventNamesOperationCompleted, userState);
        }

        private void OnLoadEventNamesOperationCompleted(object arg)
        {
            if ((this.LoadEventNamesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadEventNamesCompleted(this, new LoadEventNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://riggvar.net/data/LoadEventData", RequestNamespace = "http://riggvar.net/data", ResponseNamespace = "http://riggvar.net/data", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadEventData(int KatID, string EventName)
        {
            object[] results = this.Invoke("LoadEventData", new object[] {
                        KatID,
                        EventName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LoadEventDataAsync(int KatID, string EventName)
        {
            this.LoadEventDataAsync(KatID, EventName, null);
        }

        /// <remarks/>
        public void LoadEventDataAsync(int KatID, string EventName, object userState)
        {
            if ((this.LoadEventDataOperationCompleted == null))
            {
                this.LoadEventDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadEventDataOperationCompleted);
            }
            this.InvokeAsync("LoadEventData", new object[] {
                        KatID,
                        EventName}, this.LoadEventDataOperationCompleted, userState);
        }

        private void OnLoadEventDataOperationCompleted(object arg)
        {
            if ((this.LoadEventDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadEventDataCompleted(this, new LoadEventDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://riggvar.net/data/SaveEventData", RequestNamespace = "http://riggvar.net/data", ResponseNamespace = "http://riggvar.net/data", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveEventData(int KatID, string EventName, string EventData, string Password)
        {
            object[] results = this.Invoke("SaveEventData", new object[] {
                        KatID,
                        EventName,
                        EventData,
                        Password});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void SaveEventDataAsync(int KatID, string EventName, string EventData, string Password)
        {
            this.SaveEventDataAsync(KatID, EventName, EventData, Password, null);
        }

        /// <remarks/>
        public void SaveEventDataAsync(int KatID, string EventName, string EventData, string Password, object userState)
        {
            if ((this.SaveEventDataOperationCompleted == null))
            {
                this.SaveEventDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveEventDataOperationCompleted);
            }
            this.InvokeAsync("SaveEventData", new object[] {
                        KatID,
                        EventName,
                        EventData,
                        Password}, this.SaveEventDataOperationCompleted, userState);
        }

        private void OnSaveEventDataOperationCompleted(object arg)
        {
            if ((this.SaveEventDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveEventDataCompleted(this, new SaveEventDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://riggvar.net/data/ExecuteCommand", RequestNamespace = "http://riggvar.net/data", ResponseNamespace = "http://riggvar.net/data", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteCommand(int KatID, string EventName, string CommandName)
        {
            object[] results = this.Invoke("ExecuteCommand", new object[] {
                        KatID,
                        EventName,
                        CommandName});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void ExecuteCommandAsync(int KatID, string EventName, string CommandName)
        {
            this.ExecuteCommandAsync(KatID, EventName, CommandName, null);
        }

        /// <remarks/>
        public void ExecuteCommandAsync(int KatID, string EventName, string CommandName, object userState)
        {
            if ((this.ExecuteCommandOperationCompleted == null))
            {
                this.ExecuteCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteCommandOperationCompleted);
            }
            this.InvokeAsync("ExecuteCommand", new object[] {
                        KatID,
                        EventName,
                        CommandName}, this.ExecuteCommandOperationCompleted, userState);
        }

        private void OnExecuteCommandOperationCompleted(object arg)
        {
            if ((this.ExecuteCommandCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteCommandCompleted(this, new ExecuteCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    public delegate void TestUTF8CompletedEventHandler(object sender, TestUTF8CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestUTF8CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TestUTF8CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    public delegate void LoadFieldCompletedEventHandler(object sender, LoadFieldCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    public delegate void LoadEventNamesCompletedEventHandler(object sender, LoadEventNamesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadEventNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadEventNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    public delegate void LoadEventDataCompletedEventHandler(object sender, LoadEventDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadEventDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadEventDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    public delegate void SaveEventDataCompletedEventHandler(object sender, SaveEventDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveEventDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SaveEventDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    public delegate void ExecuteCommandCompletedEventHandler(object sender, ExecuteCommandCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.20506.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ExecuteCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591